{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Standalone Enterprise Chef (EC) 11 server on CentOS 6.",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "ECDownloadURL": {
      "Description" : "URL to Enterprise Chef RPM",
      "Type": "String",
      "AllowedPattern" : "http:\/\/[a-z0-9-_.\/]+(.rpm).*",
      "ConstraintDescription" : "must be a remotely hosted (http://) hosted .rpm file."
    },

    "MCDownloadURL": {
      "Description" : "URL to Enterprise Chef Management Console RPM",
      "Type": "String",
      "Default": "NULL",
      "AllowedPattern" : "(NULL|http:\/\/[a-z0-9-_.\/]+(.rpm).*)",
      "ConstraintDescription" : "must be a remotely hosted (http://) hosted .rpm file."
    },

    "RepDownloadURL": {
      "Description" : "URL to Enterprise Chef Reporting RPM",
      "Type": "String",
      "Default": "NULL",
      "AllowedPattern" : "(NULL|http:\/\/[a-z0-9-_.\/]+(.rpm).*)",
      "ConstraintDescription" : "must be a remotely hosted (http://) hosted .rpm file."
    },

    "PushDownloadURL": {
      "Description" : "URL to Enterprise Chef Push Jobs RPM",
      "Type": "String",
      "Default": "NULL",
      "AllowedPattern" : "(NULL|http:\/\/[a-z0-9-_.\/]+(.rpm).*)",
      "ConstraintDescription" : "must be a remotely hosted (http://) hosted .rpm file."
    },

    "S3Bookshelf" : {
      "Default" : "true",
      "Description" : "Should the Bookshelf be stored on S3?",
      "Type" : "String",
      "AllowedValues" : ["true","false"],
      "ConstraintDescription" : "must be true or false."
    },

    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "c3.xlarge",
      "AllowedValues" : [
        "m1.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.xlarge",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type with at least 4 vCPU and 4GB of RAM."
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "m1.xlarge"   : { "Arch" : "64" },
      "m3.xlarge"   : { "Arch" : "64" },
      "m3.2xlarge"  : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" },
      "c3.xlarge"   : { "Arch" : "64" },
      "c3.2xlarge"  : { "Arch" : "64" },
      "c3.4xlarge"  : { "Arch" : "64" },
      "c3.8xlarge"  : { "Arch" : "64" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-52009e3b", "64HVM" : "ami-eec75e87" },
      "us-west-2"      : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-e030a5d0", "64HVM" : "ami-503bae60" },
      "us-west-1"      : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-0a2f024f", "64HVM" : "NOT_YET_SUPPORTED" },
      "eu-west-1"      : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-8aa3a8fe", "64HVM" : "ami-e4b5be90" },
      "ap-southeast-1" : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-0c034f5e", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-southeast-2" : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-f261f0c8", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-northeast-1" : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-651a9b64", "64HVM" : "NOT_YET_SUPPORTED" },
      "sa-east-1"      : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-b32cf7ae", "64HVM" : "NOT_YET_SUPPORTED" }
    }
  },

  "Conditions" : {
    "S3BackedBookshelf" : { "Fn::Equals" : [{ "Ref" : "S3Bookshelf" }, "true"] },
    "InstallMgmtConsole" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "MCDownloadURL" }, "NULL" ]}]},
    "InstallReporting" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "RepDownloadURL" }, "NULL" ]}]},
    "InstallPushJobs" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "PushDownloadURL" }, "NULL" ]}]}
  },
  

  "Resources" : {

    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [ {
          "PolicyName": "root",
          "PolicyDocument": { "Statement": [ {
            "Effect":"Allow",
            "Action":"cloudformation:DescribeStackResource",
            "Resource":"*"
          } ] }
        } ]
      }
    },

    "AccessKey" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref" : "CfnUser" }
      }
    },

    "CookbooksBucket" : {
      "Type" : "AWS::S3::Bucket",
      "Condition" : "S3BackedBookshelf",
      "Properties" : {
        "AccessControl" : "Private"
      }
    },

    "CookbooksBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Condition" : "S3BackedBookshelf",
      "Properties" : {
        "PolicyDocument": {
          "Version"      : "2008-10-17",
          "Id"           : "CookbooksWritePolicy",
          "Statement"    : [
            {
              "Action"     : ["s3:PutObject", "s3:GetObject", "s3:DeleteObject"],
              "Effect"     : "Allow",
              "Resource"   : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "CookbooksBucket"} , "/*"]]},
              "Principal"  : { "AWS": {"Fn::GetAtt" : ["CfnUser", "Arn"]} }
            },
            {
              "Action"     : ["s3:ListBucket"],
              "Effect"     : "Allow",
              "Resource"   : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "CookbooksBucket"}]]},
              "Principal"  : { "AWS": {"Fn::GetAtt" : ["CfnUser", "Arn"]} }
            }
          ]
        },
        "Bucket" : {"Ref" : "CookbooksBucket"}
      }
    },

    "ChefServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Enterprise Chef",

        "AWS::CloudFormation::Init" : {
          "config" : {
            "yum" : {
              "ntp"      : [],
              "crontabs" : [],
              "git"      : [],
              "freetype" : [],
              "libpng"   : []
            },
            "files": {
              "/etc/opscode/private-chef.rb" : {
                "content": { "Fn::Join" : ["", [
                  {
                    "Fn::If" : [
                      "S3BackedBookshelf",
                      { "Fn::Join" : [ "", [
                        "bookshelf['vip'] = 's3.amazonaws.com'\n",
                        "bookshelf['access_key_id'] = '", { "Ref" : "AccessKey" }, "'\n",
                        "bookshelf['secret_access_key'] = '", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]}, "'\n",
                        "opscode_erchef['s3_bucket'] = '", { "Ref" : "CookbooksBucket" }, "'\n"
                      ]]},
                      ""
                    ]
                  },
                  {
                    "Fn::If" : [
                      "InstallMgmtConsole",
                      "opscode_webui['enable'] = false\n",
                      ""
                    ]
                  }
                ]]},
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              }
            }
          },
          "services": {
            "sysvinit": {
              "ntpd": {
                "enabled" : "true",
                "ensureRunning" : "true"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "ChefServerSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sda",
            "Ebs" : { "VolumeSize" : "50" }
          }
        ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",

          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "resize2fs /dev/sda || error_exit 'Could not resize root volume'\n",

          "PUBLIC_DNS=`(curl http://169.254.169.254/latest/meta-data/public-hostname)`\n",
          "PRIVATE_IPV4=`(curl http://169.254.169.254/latest/meta-data/local-ipv4)`\n",
          "SHORTNAME=`(echo $PUBLIC_DNS | cut -d \".\" -f1)`\n",
          "export HOME=\/root\n",
          "yum -y install https://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n",
          "yum -y install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm\n",
          "export PATH=$PATH:/opt/aws/bin\n",

          "cfn-init --region ", { "Ref" : "AWS::Region" },
          "    -v -s ", { "Ref" : "AWS::StackName" }, " -r ChefServer ",
          "         --access-key ", { "Ref" : "AccessKey" },
          "         --secret-key ", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
          "         --region     ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",


          "## Download and install Enterprise Chef\n",
          "wget '", { "Ref": "ECDownloadURL" }, "' -O /tmp/enterprise-chef.rpm || error_exit 'Download of Enterprise Chef RPM failed.'\n",
          "yum -y install /tmp/enterprise-chef.rpm || error_exit 'Installation of Enterprise Chef failed.'\n",
          "hostname $SHORTNAME\n",
          "echo $PUBLIC_DNS | tee /etc/hostname\n",
          "echo \"$PRIVATE_IPV4 $PUBLIC_DNS $SHORTNAME\" | tee -a /etc/hosts\n",
          "private-chef-ctl reconfigure | tee -a /var/log/enterprise-chef-install.log\n",
          "if [ $PIPESTATUS[0] -ne 0 ]; then \n",
          "   error_exit 'private-chef-ctl reconfigure failed after installing Enterprise Chef core.'\n",
          "fi\n",


          "## Download and install the Enterprise Chef Management Console\n",
          "if [ '", { "Ref": "MCDownloadURL" }, "' != 'NULL' ]; then\n",
          "   wget '", { "Ref": "MCDownloadURL" }, "' -O /tmp/management-console.rpm || error_exit 'Download of Enterprise Chef Management Console RPM failed.'\n",
          "   yum -y install /tmp/management-console.rpm || error_exit 'Installation of Enterprise Chef Management Console RPM failed.'\n",
          "   private-chef-ctl reconfigure | tee -a /var/log/management-console-install.log\n",
          "   if [ $PIPESTATUS[0] -ne 0 ]; then \n",
          "      error_exit 'private-chef-ctl reconfigure failed after installing Enterprise Chef Management Console.'\n",
          "   fi\n",
          "   opscode-manage-ctl reconfigure | tee -a /var/log/management-console-install.log \n",
          "   if [ $PIPESTATUS[0] -ne 0 ]; then \n",
          "      error_exit 'opscode-manage-ctl reconfigure failed when installing Enterprise Chef Management Console.'\n",
          "   fi\n",
          "fi\n",


          "## Download and install Enterprise Chef Reporting\n",
          "if [ '", { "Ref" : "RepDownloadURL" }, "' != 'NULL' ]; then\n",
          "   wget '", { "Ref": "RepDownloadURL" }, "' -O /tmp/chef-reporting.rpm || error_exit 'Download of Enterprise Chef Reporting RPM failed.'\n",
          "   yum -y install /tmp/chef-reporting.rpm || error_exit 'Installation of Enterprise Chef Reporting RPM failed.'\n",
          "   opscode-reporting-ctl reconfigure | tee -a /var/log/chef-reporting-install.log\n",
          "   if [ $PIPESTATUS[0] -ne 0 ]; then \n",
          "      error_exit 'opscode-reporting-ctl reconfigure failed after installing Enterprise Chef Reporting.'\n",
          "   fi\n",
          "   private-chef-ctl restart opscode-reporting | tee -a /var/log/chef-reporting-install.log\n",
          "   if [ $PIPESTATUS[0] -ne 0 ]; then \n",
          "      error_exit 'private-chef-ctl restart opscode-reporting failed after installing Enterprise Chef Reporting.'\n",
          "   fi\n",
          "fi\n",


          "## Download and install the Enterprise Chef Push Jobs server\n",
          "if [ '", { "Ref" : "PushDownloadURL" }, "' != 'NULL' ]; then\n",
          "   wget '", { "Ref": "PushDownloadURL" }, "' -O /tmp/chef-pushjobs.rpm || error_exit 'Download of Enterprise Chef Push Jobs RPM failed.'\n",
          "   yum -y install /tmp/chef-pushjobs.rpm || error_exit 'Installation of Enterprise Chef Push Jobs RPM failed.'\n",
          "   opscode-push-jobs-server-ctl reconfigure | tee -a /var/log/chef-pushjobs-install.log\n",
          "   if [ $PIPESTATUS[0] -ne 0 ]; then \n",
          "      error_exit 'opscode-push-jobs-server-ctl reconfigure failed after installing Enterprise Chef Push Jobs server.'\n",
          "   fi\n",
          "   private-chef-ctl reconfigure | tee -a /var/log/chef-pushjobs-install.log\n",
          "   if [ $PIPESTATUS[0] -ne 0 ]; then \n",
          "      error_exit 'private-chef-ctl reconfigure failed after installing Enterprise Chef Push Jobs server.'\n",
          "   fi\n",
          "   private-chef-ctl restart opscode-pushy-server | tee -a /var/log/chef-pushjobs-install.log\n",
          "   if [ $PIPESTATUS[0] -ne 0 ]; then \n",
          "      error_exit 'private-chef-ctl restart opscode-pushy-server failed after installing Enterprise Chef Push Jobs server.'\n",
          "   fi\n",
          "fi\n",


          "# If all went well, signal success\n",
          "cfn-signal -e 0 -r 'Enterprise Chef Server configuration successful' '", { "Ref" : "WaitHandle" }, "'"
        ]]}}
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "ChefServer",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "1200"
      }
    },

    "ChefServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP/S access via ports 80 and 443",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }
    }
  },

  "Outputs" : {
    "ChefServerURL" : {
      "Value" : { "Fn::Join" : ["", ["https://", { "Fn::GetAtt" : [ "ChefServer", "PublicDnsName" ]}]] },
      "Description" : "Enterprise Chef Server URL"
    }
  }
}
