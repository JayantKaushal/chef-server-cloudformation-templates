{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation Template for a Tiered implementation of Enterprise Chef. This template creates an Enterprise Chef (EC) server across multiple EC2 instances with a bootstrap script that will install the packages and files necessary to have a fully functioning EC server after providing the download URL. **WARNING** This template creates Amazon EC2 instances. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "ECDownloadURL" : {
      "Default" : "",
      "Description" : "Enterprise Chef Download Link",
      "Type" : "String"
    },
    "FrontEndInstanceType" : {
      "Description" : "EC2 instance type for front-end server(s)",
      "Type" : "String",
      "Default" : "c1.medium",
      "AllowedValues" : [ "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type with at least 4 vCPU and 4GB of RAM."
    },
    "BackEndInstanceType" : {
      "Description" : "EC2 instance type for the back-end server",
      "Type" : "String",
      "Default" : "c1.medium",
      "AllowedValues" : [ "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type with at least 4 vCPU and 4GB of RAM."
    },
    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "BucketName" : {
      "Description" : "Name of bucket used to distrubute configuration files",
      "Type" : "String"
    }
  },
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "m1.large" : {
        "Arch" : "64"
      },
      "m1.xlarge" : {
        "Arch" : "64"
      },
      "m2.xlarge" : {
        "Arch" : "64"
      },
      "m2.2xlarge" : {
        "Arch" : "64"
      },
      "m2.4xlarge" : {
        "Arch" : "64"
      },
      "m3.xlarge" : {
        "Arch" : "64"
      },
      "m3.2xlarge" : {
        "Arch" : "64"
      },
      "c1.medium" : {
        "Arch" : "64"
      },
      "c1.xlarge" : {
        "Arch" : "64"
      },
      "cc1.4xlarge" : {
        "Arch" : "64HVM"
      },
      "cc2.8xlarge" : {
        "Arch" : "64HVM"
      },
      "cg1.4xlarge" : {
        "Arch" : "64HVM"
      }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1" : {
        "32" : "ami-8aadd0e3",
        "64" : "ami-8eadd0e7",
        "64HVM" : "NOT_YET_SUPPORTED"
      },
      "us-west-2" : {
        "32" : "ami-8d9b08bd",
        "64" : "ami-f19b08c1",
        "64HVM" : "NOT_YET_SUPPORTED"
      },
      "us-west-1" : {
        "32" : "ami-5a8aa31f",
        "64" : "ami-648aa321",
        "64HVM" : "NOT_YET_SUPPORTED"
      },
      "eu-west-1" : {
        "32" : "ami-55afb221",
        "64" : "ami-57afb223",
        "64HVM" : "NOT_YET_SUPPORTED"
      },
      "ap-southeast-1" : {
        "32" : "ami-3871386a",
        "64" : "ami-3e71386c",
        "64HVM" : "NOT_YET_SUPPORTED"
      },
      "ap-southeast-2" : {
        "32" : "ami-29009313",
        "64" : "ami-2f009315",
        "64HVM" : "NOT_YET_SUPPORTED"
      },
      "ap-northeast-1" : {
        "32" : "ami-2b21b42a",
        "64" : "ami-2d21b42c",
        "64HVM" : "NOT_YET_SUPPORTED"
      },
      "sa-east-1" : {
        "32" : "ami-822c899f",
        "64" : "ami-bc2c89a1",
        "64HVM" : "NOT_YET_SUPPORTED"
      }
    }
  },
  "Resources" : {
    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path" : "/",
        "Policies" : [ {
          "PolicyName" : "root",
          "PolicyDocument" : {
            "Statement" : [ {
              "Effect" : "Allow",
              "Action" : [ "cloudformation:DescribeStackResource", "s3:*" ],
              "Resource" : "*"
            } ]
          }
        } ]
      }
    },
    "AccessKey" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {
          "Ref" : "CfnUser"
        }
      }
    },
    "S3Bucket" : {
      "Type" : "AWS::S3::Bucket"
    },
    "ECBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "PolicyDocument" : {
          "Version" : "2008-10-17",
          "Id" : "ECBucketPolicy",
          "Statement" : [ {
            "Sid" : "EnableReadWrite",
            "Action" : [ "s3:GetObject", "s3:PutObject", "s3:PutObjectACL" ],
            "Effect" : "Allow",
            "Resource" : {
              "Fn::Join" : [ "", [ "arn:aws:s3:::", {
                "Ref" : "S3Bucket"
              }, "/*" ] ]
            },
            "Principal" : {
              "AWS" : {
                "Fn::GetAtt" : [ "CfnUser", "Arn" ]
              }
            }
          } ]
        },
        "Bucket" : {
          "Ref" : "S3Bucket"
        }
      }
    },
    "ECFrontEndSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable ports necessary for front-end Enterprise Chef servers",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "443",
          "ToPort" : "443",
          "CidrIp" : "0.0.0.0/0"
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : {
            "Ref" : "SSHLocation"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "9672",
          "ToPort" : "9672",
          "SourceSecurityGroupName" : {
            "Ref" : "ECBackEndSecurityGroup"
          }
        } ]
      }
    },
    "ECBackEndSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable ports necessary for back-end Enterprise Chef servers from the ECFrontEndSecurityGroup",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "443",
          "ToPort" : "443",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "4321",
          "ToPort" : "4321",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "4369",
          "ToPort" : "4369",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "5140",
          "ToPort" : "5140",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "5432",
          "ToPort" : "5432",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "5672",
          "ToPort" : "5672",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "5984",
          "ToPort" : "5984",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "6379",
          "ToPort" : "6379",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "7788",
          "ToPort" : "7788",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "8000",
          "ToPort" : "8000",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "8983",
          "ToPort" : "8983",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "9000",
          "ToPort" : "9000",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "9460",
          "ToPort" : "9460",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "9462",
          "ToPort" : "9463",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "9465",
          "ToPort" : "9466",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "9670",
          "ToPort" : "9672",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "9680",
          "ToPort" : "9680",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "9683",
          "ToPort" : "9683",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "9685",
          "ToPort" : "9685",
          "SourceSecurityGroupName" : {
            "Ref" : "ECFrontEndSecurityGroup"
          }
        } ]
      }
    },
    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "ECBackEndServer",
      "Properties" : {
        "Handle" : {
          "Ref" : "WaitHandle"
        },
        "Timeout" : "600"
      }
    },
    "ECFrontEndLB" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : {
          "Fn::GetAZs" : {
            "Fn::GetAZs" : {
              "Fn::GetAtt" : [ "ECBackEndServer", "AvailabilityZone" ]
            }
          }
        },
        "HealthCheck" : {
          "HealthyThreshold" : "10",
          "Interval" : "15",
          "Target" : "HTTP:80/",
          "Timeout" : "2",
          "UnhealthyThreshold" : "2"
        },
        "Listeners" : [ {
          "InstancePort" : "443",
          "LoadBalancerPort" : "443",
          "Protocol" : "HTTPS",
          "PolicyNames" : [ "CookieBasedPolicy" ]
        }, {
          "InstancePort" : "80",
          "LoadBalancerPort" : "80",
          "Protocol" : "HTTP",
          "PolicyNames" : [ "CookieBasedPolicy" ]
        } ]
      }
    },
    "ECFrontEndServer2" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Enterprise Chef front-end server 2",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "ntp" : [ ],
                "git-core" : [ ]
              }
            },
            "sources" : {
              "/etc/opscode" : {
                "Fn::Join" : [ "", [ "http://", {
                  "Ref" : "BucketName"
                }, ".s3.amazonaws.com/opscode.tar.gz" ] ]
              }
            },
            "files" : {
              "/etc/opscode/private-chef.rb" : {
                "content" : {
                  "Fn::Join" : [ "", [ "topology \"tier\"\n", "server \"", {
                    "Fn::GetAtt" : [ "ECBackEndServer", "PrivateDnsName" ]
                  }, "\",\n", ":ipaddress => \"", {
                    "Fn::GetAtt" : [ "ECBackEndServer", "PrivateIp" ]
                  }, "\",\n", ":role => \"backend\",\n", ":bootstrap => true\n", "\n", "backend_vip \"", {
                    "Fn::GetAtt" : [ "ECBackEndServer", "PrivateDnsName" ]
                  }, "\",\n", ":ipaddress => \"", {
                    "Fn::GetAtt" : [ "ECBackEndServer", "PrivateIp" ]
                  }, "\",\n", "\n", "server \"", {
                    "Fn::GetAtt" : [ "ECFrontEndServer1", "PrivateDnsName" ]
                  }, "\",\n", ":ipaddress => \"", {
                    "Fn::GetAtt" : [ "ECFrontEndServer1", "PrivateIp" ]
                  }, "\",\n", ":role => \"frontend\"\n", "\n", "server \"", {
                    "Fn::GetAtt" : [ "ECFrontEndServer2", "PrivateDnsName" ]
                  }, "\",\n", ":ipaddress => \"", {
                    "Fn::GetAtt" : [ "ECFrontEndServer2", "PrivateIp" ]
                  }, "\",\n", ":role => \"frontend\"\n", "\n", "api_fqdn \"", {
                    "Fn::GetAtt" : [ "ECFrontEndLB", "DNSName" ]
                  }, "\"" ] ]
                }
              }
            }
          },
          "AWS::CloudFormation::Authentication" : {
            "S3AccessCreds" : {
              "type" : "S3",
              "accessKeyId" : {
                "Ref" : "AccessKey"
              },
              "secretKey" : {
                "Fn::GetAtt" : [ "AccessKey", "SecretAccessKey" ]
              },
              "buckets" : [ {
                "Ref" : "BucketName"
              } ]
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : {
          "Fn::FindInMap" : [ "AWSRegionArch2AMI", {
            "Ref" : "AWS::Region"
          }, {
            "Fn::FindInMap" : [ "AWSInstanceType2Arch", {
              "Ref" : "FrontEndInstanceType"
            }, "Arch" ]
          } ]
        },
        "InstanceType" : {
          "Ref" : "FrontEndInstanceType"
        },
        "SecurityGroups" : [ {
          "Ref" : "ECFrontEndSecurityGroup"
        } ],
        "KeyName" : {
          "Ref" : "KeyName"
        },
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [ "", [ "#!/bin/bash -v\n", "function error_exit\n", "{\n", "  cfn-signal -e 1 -r \"$1\" '", {
              "Ref" : "WaitHandle"
            }, "'\n", "  exit 1\n", "}\n", "PUBLIC_DNS=`(curl http://169.254.169.254/latest/meta-data/public-hostname)`\n", "PRIVATE_IPV4=`(curl http://169.254.169.254/latest/meta-data/local-ipv4)`\n", "SHORTNAME=`(echo $PUBLIC_DNS | cut -d \".\" -f1)`\n", "export HOME=/root\n", "apt-get -y install python-setuptools\n", "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n", "cfn-init --region ", {
              "Ref" : "AWS::Region"
            }, "    -v -s ", {
              "Ref" : "AWS::StackName"
            }, " -r ECFrontEndServer2 ", "         --access-key ", {
              "Ref" : "AccessKey"
            }, "         --secret-key ", {
              "Fn::GetAtt" : [ "AccessKey", "SecretAccessKey" ]
            }, "         --region     ", {
              "Ref" : "AWS::Region"
            }, " || error_exit 'Failed to run cfn-init'\n", "## Download the Enterprice Chef installer\n", "wget \"", {
              "Ref" : "ECDownloadURL"
            }, "\" -O /tmp/private-chef.ubuntu.10.04_amd64.deb\n", "dpkg -i /tmp/private-chef.ubuntu.10.04_amd64.deb\n", "hostname $SHORTNAME \n", "echo $PUBLIC_DNS | sudo tee /etc/hostname\n", "echo \"$PRIVATE_IPV4 $PUBLIC_DNS $SHORTNAME\" >> /etc/hosts\n", "private-chef-ctl reconfigure >> /var/log/chef-install.log\n", "# If all went well, signal success\n", "cfn-signal -e $? -r 'Chef Server configuration' '", {
              "Ref" : "WaitHandle"
            }, "'\n" ] ]
          }
        }
      }
    },
    "ECFrontEndServer1" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Enterprise Chef front-end server 1",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "ntp" : [ ],
                "git-core" : [ ]
              }
            },
            "sources" : {
              "/etc/opscode" : {
                "Fn::Join" : [ "", [ "http://", {
                  "Ref" : "BucketName"
                }, ".s3.amazonaws.com/opscode.tar.gz" ] ]
              }
            },
            "files" : {
              "/etc/opscode/private-chef.rb" : {
                "content" : {
                  "Fn::Join" : [ "", [ "topology \"tier\"\n", "server \"", {
                    "Fn::GetAtt" : [ "ECBackEndServer", "PrivateDnsName" ]
                  }, "\",\n", ":ipaddress => \"", {
                    "Fn::GetAtt" : [ "ECBackEndServer", "PrivateIp" ]
                  }, "\",\n", ":role => \"backend\",\n", ":bootstrap => true\n", "\n", "backend_vip \"", {
                    "Fn::GetAtt" : [ "ECBackEndServer", "PrivateDnsName" ]
                  }, "\",\n", ":ipaddress => \"", {
                    "Fn::GetAtt" : [ "ECBackEndServer", "PrivateIp" ]
                  }, "\",\n", "\n", "server \"", {
                    "Fn::GetAtt" : [ "ECFrontEndServer1", "PrivateDnsName" ]
                  }, "\",\n", ":ipaddress => \"", {
                    "Fn::GetAtt" : [ "ECFrontEndServer1", "PrivateIp" ]
                  }, "\",\n", ":role => \"frontend\"\n", "\n", "server \"", {
                    "Fn::GetAtt" : [ "ECFrontEndServer2", "PrivateDnsName" ]
                  }, "\",\n", ":ipaddress => \"", {
                    "Fn::GetAtt" : [ "ECFrontEndServer2", "PrivateIp" ]
                  }, "\",\n", ":role => \"frontend\"\n", "\n", "api_fqdn \"", {
                    "Fn::GetAtt" : [ "ECFrontEndLB", "DNSName" ]
                  }, "\"" ] ]
                }
              }
            }
          },
          "AWS::CloudFormation::Authentication" : {
            "S3AccessCreds" : {
              "type" : "S3",
              "accessKeyId" : {
                "Ref" : "AccessKey"
              },
              "secretKey" : {
                "Fn::GetAtt" : [ "AccessKey", "SecretAccessKey" ]
              },
              "buckets" : [ {
                "Ref" : "BucketName"
              } ]
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : {
          "Fn::FindInMap" : [ "AWSRegionArch2AMI", {
            "Ref" : "AWS::Region"
          }, {
            "Fn::FindInMap" : [ "AWSInstanceType2Arch", {
              "Ref" : "FrontEndInstanceType"
            }, "Arch" ]
          } ]
        },
        "InstanceType" : {
          "Ref" : "FrontEndInstanceType"
        },
        "SecurityGroups" : [ {
          "Ref" : "ECFrontEndSecurityGroup"
        } ],
        "KeyName" : {
          "Ref" : "KeyName"
        },
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [ "", [ "#!/bin/bash -v\n", "function error_exit\n", "{\n", "  cfn-signal -e 1 -r \"$1\" '", {
              "Ref" : "WaitHandle"
            }, "'\n", "  exit 1\n", "}\n", "PUBLIC_DNS=`(curl http://169.254.169.254/latest/meta-data/public-hostname)`\n", "PRIVATE_IPV4=`(curl http://169.254.169.254/latest/meta-data/local-ipv4)`\n", "SHORTNAME=`(echo $PUBLIC_DNS | cut -d \".\" -f1)`\n", "export HOME=/root\n", "apt-get -y install python-setuptools\n", "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n", "cfn-init --region ", {
              "Ref" : "AWS::Region"
            }, "    -v -s ", {
              "Ref" : "AWS::StackName"
            }, " -r ECFrontEndServer1 ", "         --access-key ", {
              "Ref" : "AccessKey"
            }, "         --secret-key ", {
              "Fn::GetAtt" : [ "AccessKey", "SecretAccessKey" ]
            }, "         --region     ", {
              "Ref" : "AWS::Region"
            }, " || error_exit 'Failed to run cfn-init'\n", "## Download the Enterprice Chef installer\n", "wget \"", {
              "Ref" : "ECDownloadURL"
            }, "\" -O /tmp/private-chef.ubuntu.10.04_amd64.deb\n", "dpkg -i /tmp/private-chef.ubuntu.10.04_amd64.deb\n", "hostname $SHORTNAME \n", "echo $PUBLIC_DNS | sudo tee /etc/hostname\n", "echo \"$PRIVATE_IPV4 $PUBLIC_DNS $SHORTNAME\" >> /etc/hosts\n", "private-chef-ctl reconfigure >> /var/log/chef-install.log\n", "# If all went well, signal success\n", "cfn-signal -e $? -r 'Chef Server configuration' '", {
              "Ref" : "WaitHandle"
            }, "'\n" ] ]
          }
        }
      }
    },
    "ECBackEndServer" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "ECBucketPolicy"],
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Enterprise Chef back-end server",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "ntp" : [ ],
                "git-core" : [ ]
              }
            },
            "files" : {
              "/etc/opscode/private-chef.rb" : {
                "content" : {
                  "Fn::Join" : [ "", [ "topology \"tier\"\n", "server \"", {
                    "Fn::GetAtt" : [ "ECBackEndServer", "PrivateDnsName" ]
                  }, "\",\n", ":ipaddress => \"", {
                    "Fn::GetAtt" : [ "ECBackEndServer", "PrivateIp" ]
                  }, "\",\n", ":role => \"backend\",\n", ":bootstrap => true\n", "\n", "backend_vip \"", {
                    "Fn::GetAtt" : [ "ECBackEndServer", "PrivateDnsName" ]
                  }, "\",\n", ":ipaddress => \"", {
                    "Fn::GetAtt" : [ "ECBackEndServer", "PrivateIp" ]
                  }, "\",\n", "\n", "server \"", {
                    "Fn::GetAtt" : [ "ECFrontEndServer1", "PrivateDnsName" ]
                  }, "\",\n", ":ipaddress => \"", {
                    "Fn::GetAtt" : [ "ECFrontEndServer1", "PrivateIp" ]
                  }, "\",\n", ":role => \"frontend\"\n", "\n", "server \"", {
                    "Fn::GetAtt" : [ "ECFrontEndServer2", "PrivateDnsName" ]
                  }, "\",\n", ":ipaddress => \"", {
                    "Fn::GetAtt" : [ "ECFrontEndServer2", "PrivateIp" ]
                  }, "\",\n", ":role => \"frontend\"\n", "\n", "api_fqdn \"", {
                    "Fn::GetAtt" : [ "ECFrontEndLB", "DNSName" ]
                  }, "\"" ] ]
                }
              },
              "/etc/passwd-s3fs" : {
                "content" : {
                  "Fn::Join" : [ "", [ {
                    "Ref" : "AccessKey"
                  }, ":", {
                    "Fn::GetAtt" : [ "AccessKey", "SecretAccessKey" ]
                  }, "\n" ] ]
                },
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "sources" : {
              "/home/ubuntu/s3fs" : "http://s3fs.googlecode.com/files/s3fs-1.73.tar.gz"
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : {
          "Fn::FindInMap" : [ "AWSRegionArch2AMI", {
            "Ref" : "AWS::Region"
          }, {
            "Fn::FindInMap" : [ "AWSInstanceType2Arch", {
              "Ref" : "BackEndInstanceType"
            }, "Arch" ]
          } ]
        },
        "InstanceType" : {
          "Ref" : "BackEndInstanceType"
        },
        "SecurityGroups" : [ {
          "Ref" : "ECBackEndSecurityGroup"
        } ],
        "KeyName" : {
          "Ref" : "KeyName"
        },
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [ "", [ "#!/bin/bash -v\n", "function error_exit\n", "{\n", "  cfn-signal -e 1 -r \"$1\" '", {
              "Ref" : "WaitHandle"
            }, "'\n", "  exit 1\n", "}\n", "PUBLIC_DNS=`(curl http://169.254.169.254/latest/meta-data/public-hostname)`\n", "PRIVATE_IPV4=`(curl http://169.254.169.254/latest/meta-data/local-ipv4)`\n", "SHORTNAME=`(echo $PUBLIC_DNS | cut -d \".\" -f1)`\n", "export HOME=/root\n", "apt-get -y install python-setuptools\n", "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n", "cfn-init --region ", {
              "Ref" : "AWS::Region"
            }, "    -v -s ", {
              "Ref" : "AWS::StackName"
            }, " -r ECBackEndServer ", "         --access-key ", {
              "Ref" : "AccessKey"
            }, "         --secret-key ", {
              "Fn::GetAtt" : [ "AccessKey", "SecretAccessKey" ]
            }, "         --region     ", {
              "Ref" : "AWS::Region"
            }, " || error_exit 'Failed to run cfn-init'\n", "# Install s3fs\n", "cd /home/ubuntu/s3fs/s3fs-1.73\n", "./configure --prefix=/usr\n", "make\n", "make install\n", "# Mount the S3 bucket\n", "mkdir -p /tmp/opscode\n", "s3fs -o allow_other -o use_cache=/tmp ", {
              "Ref" : "S3Bucket"
            }, " /tmp/opscode || error_exit 'Failed to mount the S3 bucket'\n", "## Download the Enterprice Chef installer\n", "wget \"", {
              "Ref" : "ECDownloadURL"
            }, "\" -O /tmp/private-chef.ubuntu.10.04_amd64.deb\n", "dpkg -i /tmp/private-chef.ubuntu.10.04_amd64.deb\n", "hostname $SHORTNAME \n", "echo $PUBLIC_DNS | sudo tee /etc/hostname\n", "echo \"$PRIVATE_IPV4 $PUBLIC_DNS $SHORTNAME\" >> /etc/hosts\n", "private-chef-ctl reconfigure >> /var/log/chef-install.log\n", "tar -zcvf /tmp/opscode.tar.gz /etc/opscode/*\n", "mv /tmp/opscode.tar.gz /tmp/opscode/.\n", "# If all went well, signal success\n", "cfn-signal -e $? -r 'Chef Server configuration' '", {
              "Ref" : "WaitHandle"
            }, "'\n" ] ]
          }
        }
      }
    }
  },
  "Outputs" : {
    "ChefServerURL" : {
      "Value" : {
        "Fn::Join" : [ "", [ "https://", {
          "Fn::GetAtt" : [ "ECFrontEndLB", "DNSName" ]
        } ] ]
      },
      "Description" : "URL for newly Enterprise Chef server"
    }
  }
}