
{
  "AWSTemplateFormatVersion" : "2010-09-09",
  
  "Description" : "AWS CloudFormation Template for a Tiered implementation of Enterprise Chef. This template creates an Enterprise Chef (EC) server across multiple EC2 instances with a bootstrap script that will install the packages and files necessary to have a fully functioning EC server after providing the download URL. **WARNING** This template creates Amazon EC2 instances. You will be billed for the AWS resources used if you create a stack from this template.",
  
  "Parameters" : {
      
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },    

    "ECDownloadURL": {
      "Default": "",
      "Description" : "Enterprise Chef Download Link",
      "Type": "String"
    },

    "FrontEndInstanceType" : {
      "Description" : "EC2 instance type for front-end server(s)",
      "Type" : "String",
      "Default" : "m1.large",
      "AllowedValues" : [ "m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type with at least 4 vCPU and 4GB of RAM."
    },

    "BackEndInstanceType" : {
      "Description" : "EC2 instance type for the back-end server",
      "Type" : "String",
      "Default" : "c1.medium",
      "AllowedValues" : [ "m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type with at least 4 vCPU and 4GB of RAM."
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "m3.xlarge"   : { "Arch" : "64" },
      "m3.2xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" },
      "cc1.4xlarge" : { "Arch" : "64HVM" },
      "cc2.8xlarge" : { "Arch" : "64HVM" },
      "cg1.4xlarge" : { "Arch" : "64HVM" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-52009e3b", "64HVM" : "ami-eec75e87" },
      "us-west-2"      : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-e030a5d0", "64HVM" : "ami-503bae60" },
      "us-west-1"      : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-0a2f024f", "64HVM" : "NOT_YET_SUPPORTED" },
      "eu-west-1"      : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-8aa3a8fe", "64HVM" : "ami-e4b5be90" },
      "ap-southeast-1" : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-0c034f5e", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-southeast-2" : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-f261f0c8", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-northeast-1" : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-651a9b64", "64HVM" : "NOT_YET_SUPPORTED" },
      "sa-east-1"      : { "32" : "NOT_YET_SUPPORTED", "64" : "ami-b32cf7ae", "64HVM" : "NOT_YET_SUPPORTED" }
    }

  },
    
  "Resources" : {     

    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [ {
          "PolicyName": "root",
          "PolicyDocument": { "Statement": [ {
            "Effect":"Allow",
            "Action":"cloudformation:DescribeStackResource",
            "Resource":"*"
          } ] }
        } ]
      }
    },

    "S3User" : {
      "Type" : "AWS::IAM::User"
    },

    "CfnAccessKey" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref" : "CfnUser" }
      }
    },

    "S3AccessKey" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref" : "S3User" }
      }
    },

    "CookbooksBucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "AccessControl" : "Private"
      }
    },

    "CookbooksBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "PolicyDocument": {
          "Version"      : "2008-10-17",
          "Id"           : "CookbooksWritePolicy",
          "Statement"    : [
            {
              "Action"     : ["s3:PutObject", "s3:GetObject", "s3:DeleteObject"],
              "Effect"     : "Allow",
              "Resource"   : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "CookbooksBucket"} , "/*"]]},
              "Principal"  : { "AWS": {"Fn::GetAtt" : ["CfnUser", "Arn"]} }
            },
            {
              "Action"     : ["s3:ListBucket"],
              "Effect"     : "Allow",
              "Resource"   : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "CookbooksBucket"}]]},
              "Principal"  : { "AWS": {"Fn::GetAtt" : ["CfnUser", "Arn"]} }
            }
          ]
        },
        "Bucket" : {"Ref" : "CookbooksBucket"}
      }
    },

    "OpscodeDataBucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "AccessControl" : "Private"
      }      
    },

    "OpscodeDataBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "PolicyDocument": {
          "Version"      : "2008-10-17",
          "Id"           : "OpscodeDataPolicy",
          "Statement"    : [
            {
              "Action"     : ["s3:PutObject", "s3:GetObject", "s3:DeleteObject"],
              "Effect"     : "Allow",
              "Resource"   : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "OpscodeDataBucket"} , "/*"]]},
              "Principal"  : { "AWS": {"Fn::GetAtt" : ["S3User", "Arn"]} }
            },
            {
              "Action"     : ["s3:ListBucket"],
              "Effect"     : "Allow",
              "Resource"   : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "OpscodeDataBucket"}]]},
              "Principal"  : { "AWS": {"Fn::GetAtt" : ["S3User", "Arn"]} }
            }
          ]
        },
        "Bucket" : {"Ref" : "OpscodeDataBucket"}
      }
    },

    "ECBackEndServer": {  
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Enterprise Chef back-end server",

        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "ntp"      : [],
                "crontabs" : [],
                "git"      : [],
                "freetype" : [],
                "libpng"   : [],
                "s3cmd"    : []
              }
            },
            "files" : {
              "/home/ec2-user/.s3cfg": {
                "content" : { "Fn::Join" : ["", [
                   "[default]\n",
                    "access_key = ", { "Ref" : "S3AccessKey" }, "\n",
                    "secret_key = ", {"Fn::GetAtt": ["S3AccessKey", "SecretAccessKey"]}, "\n",
                    "use_https = True\n"
                    ]]},
                "mode"  : "000600",
                "owner" : "ec2-user",
                "group" : "ec2-user" 
              },
              "/etc/opscode/private-chef.rb" : {
                "content" : { "Fn::Join" : ["", [
                  "topology \"tier\"\n",
                  "server \"", { "Fn::GetAtt" : [ "ECBackEndServer", "PrivateDnsName" ]},"\",\n",
                  ":ipaddress => \"", { "Fn::GetAtt" : [ "ECBackEndServer", "PrivateIp" ]},"\",\n",
                  ":role => \"backend\",\n",
                  ":bootstrap => true\n",
                  "\n",
                  "backend_vip \"", { "Fn::GetAtt" : [ "ECBackEndServer", "PrivateDnsName" ]},"\",\n",
                  ":ipaddress => \"", { "Fn::GetAtt" : [ "ECBackEndServer", "PrivateIp" ]},"\",\n",
                  "\n",
                  "server \"", { "Fn::GetAtt" : [ "ECFrontEndServer1", "PrivateDnsName" ]},"\",\n",
                  ":ipaddress => \"", { "Fn::GetAtt" : [ "ECFrontEndServer1", "PrivateIp" ]},"\",\n",
                  ":role => \"frontend\"\n",
                  "\n",
                  "server \"", { "Fn::GetAtt" : [ "ECFrontEndServer2", "PrivateDnsName" ]},"\",\n",
                  ":ipaddress => \"", { "Fn::GetAtt" : [ "ECFrontEndServer2", "PrivateIp" ]},"\",\n",
                  ":role => \"frontend\"\n",
                  "\n",
                  "api_fqdn \"", { "Fn::GetAtt" : [ "ECFrontEndLB", "DNSName" ]},"\"",
                  "\n",
                  "bookshelf['vip'] = 's3.amazonaws.com'\n",
                  "bookshelf['access_key_id'] = '", { "Ref" : "CfnAccessKey" }, "'\n",
                  "bookshelf['secret_access_key'] = '", {"Fn::GetAtt": ["CfnAccessKey", "SecretAccessKey"]}, "'\n",
                  "opscode_erchef['s3_bucket'] = '", { "Ref" : "CookbooksBucket" }, "'\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services": {
              "sysvinit": {
                "ntpd": {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                    { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "BackEndInstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "BackEndInstanceType" },
        "SecurityGroups" : [ {"Ref" : "ECBackEndSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",

          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "BackendWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "PUBLIC_DNS=`(curl http://169.254.169.254/latest/meta-data/public-hostname)`\n",
          "PRIVATE_IPV4=`(curl http://169.254.169.254/latest/meta-data/local-ipv4)`\n",
          "SHORTNAME=`(echo $PUBLIC_DNS | cut -d \".\" -f1)`\n",
          "export HOME=\/root\n",
          "yum -y install https://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n",
          "yum -y install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm\n",
          "export PATH=$PATH:/opt/aws/bin\n",
          "cfn-init ",
          "  -v -s  ", { "Ref" : "AWS::StackName" },
          "  -r ECBackEndServer ",
          "  --access-key ", { "Ref" : "CfnAccessKey" },
          "  --secret-key ", {"Fn::GetAtt": ["CfnAccessKey", "SecretAccessKey"]},
          "  --region     ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "## Download the Enterprise Chef installer\n",
          "wget \"", { "Ref" : "ECDownloadURL" }, "\" -O /tmp/private-chef-11.0.0.el6.x86_64.rpm\n",
          "yum -y install /tmp/private-chef-11.0.0.el6.x86_64.rpm\n",
          "hostname $SHORTNAME \n",
          "echo $PUBLIC_DNS | tee /etc/hostname\n",
          "echo \"$PRIVATE_IPV4 $PUBLIC_DNS $SHORTNAME\" >> /etc/hosts\n",
          "private-chef-ctl reconfigure >> /var/log/chef-install.log\n",

          "# Copy /etc/opscode pieces to S3 bucket\n",
          "s3cmd -c /home/ec2-user/.s3cfg put /etc/opscode/*.pem s3://", {"Ref" : "OpscodeDataBucket" } ,"/ >> /var/log/chef-install.log 2>&1 || error_exit 'Failed to put Chef Server certificates'\n",
          "s3cmd -c /home/ec2-user/.s3cfg put /etc/opscode/*.cert s3://", {"Ref" : "OpscodeDataBucket" } ,"/ >> /var/log/chef-install.log 2>&1 || error_exit 'Failed to put Chef Server certificates'\n",
          "s3cmd -c /home/ec2-user/.s3cfg put /etc/opscode/private-chef-secrets.json s3://", {"Ref" : "OpscodeDataBucket" } ,"/ >> /var/log/chef-install.log 2>&1 || error_exit 'Failed to put Chef Server secrets'\n",

          "# If all went well, signal success\n",
          "cfn-signal -e $? -r 'Backend configuration complete' '", { "Ref" : "BackendWaitHandle" }, "'\n"
        ]]}}        
      }
    },

    "BackendWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "BackendWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "ECBackEndServer",
      "Properties" : {
        "Handle"  : { "Ref" : "BackendWaitHandle" },
        "Timeout" : "600"
      }
    },

    "ECFrontEndServer1": {  
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Enterprise Chef front-end server 1",

        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "ntp"      : [],
                "crontabs" : [],
                "git"      : [],
                "freetype" : [],
                "libpng"   : [],
                "s3cmd"    : []
              }
            },
            "commands": {
              "make_etc_opscode": {
                "command" : "mkdir /etc/opscode",
                "test": "test ! -d /etc/opscode"
              }
            },
            "files" : {
              "/home/ec2-user/.s3cfg": {
                "content" : { "Fn::Join" : ["", [
                   "[default]\n",
                    "access_key = ", { "Ref" : "S3AccessKey" }, "\n",
                    "secret_key = ", {"Fn::GetAtt": ["S3AccessKey", "SecretAccessKey"]}, "\n",
                    "use_https = True\n"
                    ]]},
                "mode"  : "000600",
                "owner" : "ec2-user",
                "group" : "ec2-user" 
              },
              "/etc/opscode/private-chef.rb" : {
                "content" : { "Fn::Join" : ["", [
                  "topology \"tier\"\n",
                  "server \"", { "Fn::GetAtt" : [ "ECBackEndServer", "PrivateDnsName" ]},"\",\n",
                  ":ipaddress => \"", { "Fn::GetAtt" : [ "ECBackEndServer", "PrivateIp" ]},"\",\n",
                  ":role => \"backend\",\n",
                  ":bootstrap => true\n",
                  "\n",
                  "backend_vip \"", { "Fn::GetAtt" : [ "ECBackEndServer", "PrivateDnsName" ]},"\",\n",
                  ":ipaddress => \"", { "Fn::GetAtt" : [ "ECBackEndServer", "PrivateIp" ]},"\",\n",
                  "\n",
                  "server \"", { "Fn::GetAtt" : [ "ECFrontEndServer1", "PrivateDnsName" ]},"\",\n",
                  ":ipaddress => \"", { "Fn::GetAtt" : [ "ECFrontEndServer1", "PrivateIp" ]},"\",\n",
                  ":role => \"frontend\"\n",
                  "\n",
                  "server \"", { "Fn::GetAtt" : [ "ECFrontEndServer2", "PrivateDnsName" ]},"\",\n",
                  ":ipaddress => \"", { "Fn::GetAtt" : [ "ECFrontEndServer2", "PrivateIp" ]},"\",\n",
                  ":role => \"frontend\"\n",
                  "\n",
                  "api_fqdn \"", { "Fn::GetAtt" : [ "ECFrontEndLB", "DNSName" ]},"\"\n",
                  "\n",
                  "bookshelf['vip'] = 's3.amazonaws.com'\n",
                  "bookshelf['access_key_id'] = '", { "Ref" : "CfnAccessKey" }, "'\n",
                  "bookshelf['secret_access_key'] = '", {"Fn::GetAtt": ["CfnAccessKey", "SecretAccessKey"]}, "'\n",
                  "opscode_erchef['s3_bucket'] = '", { "Ref" : "CookbooksBucket" }, "'\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services": {
              "sysvinit": {
                "ntpd": {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "FrontEndInstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "FrontEndInstanceType" },
        "SecurityGroups" : [ {"Ref" : "ECFrontEndSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",

          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "FrontendWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "PUBLIC_DNS=`(curl http://169.254.169.254/latest/meta-data/public-hostname)`\n",
          "PRIVATE_IPV4=`(curl http://169.254.169.254/latest/meta-data/local-ipv4)`\n",
          "SHORTNAME=`(echo $PUBLIC_DNS | cut -d \".\" -f1)`\n",
          "export HOME=\/root\n",
          "yum -y install https://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n",
          "yum -y install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm\n",
          "export PATH=$PATH:/opt/aws/bin\n",
          "cfn-init ",
          "  -v -s ", { "Ref" : "AWS::StackName" }, " -r ECFrontEndServer1 ",
          "  --access-key ", { "Ref" : "CfnAccessKey" },
          "  --secret-key ", {"Fn::GetAtt": ["CfnAccessKey", "SecretAccessKey"]},
          "  --region     ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "## Download the Enterprice Chef installer\n",
          "wget \"", { "Ref" : "ECDownloadURL" }, "\" -O /tmp/private-chef-11.0.0.el6.x86_64.rpm\n",
          "yum -y install /tmp/private-chef-11.0.0.el6.x86_64.rpm\n",
          "hostname $SHORTNAME \n",
          "echo $PUBLIC_DNS | tee /etc/hostname\n",
          "echo \"$PRIVATE_IPV4 $PUBLIC_DNS $SHORTNAME\" >> /etc/hosts\n",
          "private-chef-ctl reconfigure >> /var/log/chef-install.log\n",

          "# If all went well, signal success\n",
          "cfn-signal -e $? -r 'Frontend1 configuration complete' '", { "Ref" : "FrontendWaitHandle" }, "'\n"
        ]]}}        
      }
    },

    "ECFrontEndServer2": {  
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Enterprise Chef front-end server 2",

        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "ntp"      : [],
                "crontabs" : [],
                "git"      : [],
                "freetype" : [],
                "libpng"   : [],
                "s3cmd"    : []
              }
            },
            "commands": {
              "make_etc_opscode": {
                "command" : "mkdir /etc/opscode",
                "test": "test ! -d /etc/opscode"
              }
            },
            "files" : {
              "/home/ec2-user/.s3cfg": {
                "content" : { "Fn::Join" : ["", [
                   "[default]\n",
                    "access_key = ", { "Ref" : "S3AccessKey" }, "\n",
                    "secret_key = ", {"Fn::GetAtt": ["S3AccessKey", "SecretAccessKey"]}, "\n",
                    "use_https = True\n"
                    ]]},
                "mode"  : "000600",
                "owner" : "ec2-user",
                "group" : "ec2-user" 
              },
              "/etc/opscode/private-chef.rb" : {
                "content" : { "Fn::Join" : ["", [
                  "topology \"tier\"\n",
                  "server \"", { "Fn::GetAtt" : [ "ECBackEndServer", "PrivateDnsName" ]},"\",\n",
                  ":ipaddress => \"", { "Fn::GetAtt" : [ "ECBackEndServer", "PrivateIp" ]},"\",\n",
                  ":role => \"backend\",\n",
                  ":bootstrap => true\n",
                  "\n",
                  "backend_vip \"", { "Fn::GetAtt" : [ "ECBackEndServer", "PrivateDnsName" ]},"\",\n",
                  ":ipaddress => \"", { "Fn::GetAtt" : [ "ECBackEndServer", "PrivateIp" ]},"\",\n",
                  "\n",
                  "server \"", { "Fn::GetAtt" : [ "ECFrontEndServer1", "PrivateDnsName" ]},"\",\n",
                  ":ipaddress => \"", { "Fn::GetAtt" : [ "ECFrontEndServer1", "PrivateIp" ]},"\",\n",
                  ":role => \"frontend\"\n",
                  "\n",
                  "server \"", { "Fn::GetAtt" : [ "ECFrontEndServer2", "PrivateDnsName" ]},"\",\n",
                  ":ipaddress => \"", { "Fn::GetAtt" : [ "ECFrontEndServer2", "PrivateIp" ]},"\",\n",
                  ":role => \"frontend\"\n",
                  "\n",
                  "api_fqdn \"", { "Fn::GetAtt" : [ "ECFrontEndLB", "DNSName" ]},"\""
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services": {
              "sysvinit": {
                "ntpd": {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "FrontEndInstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "FrontEndInstanceType" },
        "SecurityGroups" : [ {"Ref" : "ECFrontEndSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",

          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "FrontendWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "PUBLIC_DNS=`(curl http://169.254.169.254/latest/meta-data/public-hostname)`\n",
          "PRIVATE_IPV4=`(curl http://169.254.169.254/latest/meta-data/local-ipv4)`\n",
          "SHORTNAME=`(echo $PUBLIC_DNS | cut -d \".\" -f1)`\n",
          "export HOME=\/root\n",
          "yum -y install https://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n",
          "yum -y install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm\n",
          "export PATH=$PATH:/opt/aws/bin\n",
          "cfn-init ",
          "    -v -s ", { "Ref" : "AWS::StackName" }, " -r ECFrontEndServer2 ",
          "    --access-key ", { "Ref" : "CfnAccessKey" },
          "    --secret-key ", {"Fn::GetAtt": ["CfnAccessKey", "SecretAccessKey"]},
          "    --region     ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "## Download the Enterprice Chef installer\n",
          "wget \"", { "Ref" : "ECDownloadURL" }, "\" -O /tmp/private-chef-11.0.0.el6.x86_64.rpm\n",
          "yum -y install /tmp/private-chef-11.0.0.el6.x86_64.rpm\n",
          "hostname $SHORTNAME \n",
          "echo $PUBLIC_DNS | tee /etc/hostname\n",
          "echo \"$PRIVATE_IPV4 $PUBLIC_DNS $SHORTNAME\" >> /etc/hosts\n",
          "private-chef-ctl reconfigure >> /var/log/chef-install.log\n",

          "# If all went well, signal success\n",
          "cfn-signal -e $? -r 'Frontend2 configuration complete' '", { "Ref" : "FrontendWaitHandle" }, "'\n"
        ]]}}        
      }
    },

    "ECFrontEndLB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": {"Fn::GetAZs" : { "Fn::GetAtt":[ "ECBackEndServer", "AvailabilityZone" ] }}
        },
        "HealthCheck": {
          "HealthyThreshold": "10",
          "Interval": "15",
          "Target": "HTTP:80/",
          "Timeout": "2",
          "UnhealthyThreshold": "2"
        },
        "Instances": [
          { "Ref": "ECFrontEndServer1"},
          { "Ref": "ECFrontEndServer2"}
        ],
        "Listeners": [
          {
            "InstancePort": "443",
            "LoadBalancerPort": "443",
            "Protocol": "HTTPS",
            "PolicyNames": []
          },
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "PolicyNames": []
          }
        ]
      }
    },

    "FrontendWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "FrontendWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Count": "2",
        "Handle"  : { "Ref" : "FrontendWaitHandle" },
        "Timeout" : "600"
      }
    },
    
    "ECFrontEndSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable ports necessary for front-end Enterprise Chef servers",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ECFrontEndLB", "SourceSecurityGroup.OwnerAlias"]}, "SourceSecurityGroupName" : {"Fn::GetAtt" : ["ECFrontEndLB", "SourceSecurityGroup.GroupName"]}
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ECFrontEndLB", "SourceSecurityGroup.OwnerAlias"]}, "SourceSecurityGroupName" : {"Fn::GetAtt" : ["ECFrontEndLB", "SourceSecurityGroup.GroupName"]}
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : {"Ref" : "SSHLocation"}
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "9672",
            "ToPort" : "9672",
            "SourceSecurityGroupName" : { "Ref" : "ECBackEndSecurityGroup" }
          }
        ]
      }      
    },
    "ECBackEndSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable ports necessary for back-end Enterprise Chef servers from the ECFrontEndSecurityGroup",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "4321", "ToPort" : "4321", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "4369", "ToPort" : "4369", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "5140", "ToPort" : "5140", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "5432", "ToPort" : "5432", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "5672", "ToPort" : "5672", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "5984", "ToPort" : "5984", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "6379", "ToPort" : "6379", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "7788", "ToPort" : "7788", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "8000", "ToPort" : "8000", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "8983", "ToPort" : "8983", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "9000", "ToPort" : "9000", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "9460", "ToPort" : "9460", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "9462", "ToPort" : "9463", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "9465", "ToPort" : "9466", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "9670", "ToPort" : "9672", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "9680", "ToPort" : "9680", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "9683", "ToPort" : "9683", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "9685", "ToPort" : "9685", "SourceSecurityGroupName" : {"Ref" : "ECFrontEndSecurityGroup" }}
        ]
      }
    }
  },
  
  "Outputs" : {
    "ChefServerURL" : {
      "Value" : { "Fn::Join" : ["", ["https://", { "Fn::GetAtt" : [ "ECFrontEndLB", "DNSName" ]}]] },
      "Description" : "URL for newly-created ELB fronting the Enterprise Chef stack"
    }
  }
}
